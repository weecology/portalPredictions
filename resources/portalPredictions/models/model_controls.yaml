AutoArima:
  metadata:
    name: AutoArima
    print_name: AutoARIMA
    descriptor: classic model, all species, focal species
    text: AutoARIMA (Automatic Auto-Regressive Integrated Moving Average) is a flexible
      Auto-Regressive Integrated Moving Average (ARIMA) model fit to the data at the
      composite (full site and just control plots) spatial level and both the composite
      (community) and the articulated (species) ecological levels. The model is selected
      and  fitted using the `auto.arima` and `forecast` functions in the **forecast**
      package [@Hyndman2013; @Hyndman2017] within the `AutoArima()` function. Generally,
      ARIMA models are defined according to three model structure parameters -- the
      number of autoregressive terms (p), the degree of differencing (d), and the
      order of the moving average (q), and are represented as ARIMA(p, d, q) [@Box1970].
      While the `auto.arima` function allows for seasonal models, the seasonality
      is hard-coded to be on the same period as the sampling, which is not the case
      for the Portal rodent surveys. As a result, no seasonal models were evaluated.
      AutoARIMA is fit flexibly, such that the model parameters can vary from fit
      to fit.
  fun: auto.arima
  args:
    'y': quote(abundance)
  interpolate:
    needed: no
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  response:
    link: normal
    type: distribution
  time: newmoon
ESSS:
  metadata:
    name: ESSS
    print_name: ESSS
    descriptor: classic model, all species, focal species, requires interpolation
    text: ESSS (Exponential Smoothing State Space) is a flexible exponential smoothing
      state space model [@Hyndman2008] fit to the interpolated data at the composite
      (full site and just control plots) spatial level and both the composite (community)
      and the articulated (species) ecological levels. The model is selected and fitted
      using the `ets` and `forecast` functions in the **forecast** package [@Hyndman2017]
      with the `allow.multiplicative.trend` argument set to `TRUE` within the `ESSS()`
      function. Models fit using `ets` implement what is known as the "innovations"
      approach to state space modeling, which assumes a single source of noise that
      is equivalent for the process and observation errors [@Hyndman2008]. In general,
      ESSS models are defined according to three model structure parameters -- error
      type, trend type, and seasonality type [@Hyndman2008]. Each of the parameters
      can be an N (none), A (additive), or M (multiplicative) state [@Hyndman2008].
      However, because of the difference in period between seasonality and sampling
      of the Portal rodents combined with the hard-coded single period of the `ets`
      function, we could not include the seasonal components to the ESSS model. ESSS
      is fit flexibly, such that the model parameters can vary from fit to fit.
  fun: ets
  args:
    'y': abundance
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  response:
    link: normal
    type: distribution
  time: newmoon
NaiveArima:
  metadata:
    name: NaiveArima
    print_name: NaiveARIMA
    descriptor: classic model, all species, focal species
    text: NaiveARIMA (Naive Auto-Regressive Integrated Moving Average) is a fixed
      Auto-Regressive Integrated Moving Average (ARIMA) model of order (0,1,0) fit
      to the data at the composite (full site and just control plots) spatial level
      and both the composite (community) and the articulated (species) ecological
      levels. The model is selected and fitted using the `Arima` and `forecast` functions
      in the **forecast** package [@Hyndman2013; @Hyndman2017] within the `NaiveArima()`
      function.
  fun: Arima
  args:
    'y': abundance
    order: c(0, 1, 0)
  interpolate:
    needed: no
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  response:
    link: normal
    type: distribution
  time: newmoon
nbGARCH:
  metadata:
    name: nbGARCH
    print_name: nbGARCH
    descriptor: classic model, all species, focal species, requires interpolation
    text: nbGARCH (Negative Binomial Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      with overdispersion (*i.e.*, a negative binomial response) fit to the interpolated
      data at the composite (full site and just control plots) spatial level and both
      the composite (community) and the articulated (species) ecological levels. The
      model for each species and the community total is selected and fitted using
      the `tsglm` function in the **tscount** package [@Liboschik2017a] within the
      `nbGARCH()` function. GARCH models are generalized ARMA models and are defined
      according to their link function, response distribution, and two model structure
      parameters -- the number of autoregressive terms (p) and the order of the moving
      average (q), and are represented as GARCH(p, q) [@Liboschik2017a]. The nbGARCH
      model is fit using the log link and a negative binomial response (modeled as
      an over-dispersed Poisson), as well as with p = 1 (first-order autoregression)
      and q = 12 (approximately yearly moving average). The `tsglm` function in the
      **tscount** package [@Liboschik2017a] uses a (conditional) quasi-likelihood
      based approach to inference and models the overdispersion as an additional parameter
      in a two-step approach. This two-stage approach has only been minimally evaluated,
      although preliminary simulation-based studies are promising [@Liboschik2017b].
  fun: tsglm
  args:
    ts: abundance
    model:
      past_obs: 1
      past_mean: 12
    distr: nbinom
    link: log
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  response:
    link: negative_binomial
    type: distribution
  time: newmoon
nbsGARCH:
  metadata:
    name: nbsGARCH
    print_name: nbsGARCH
    descriptor: classic model, all species, focal species, requires interpolation
    text: nbsGARCH (Negative Binomial Seasonal Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      with overdispersion (*i.e.*, a negative binomial response) with seasonal predictors
      modeled using two Fourier series terms (sin and cos of the fraction of the year)
      fit to the interpolated data at the composite (full site and just control plots)
      spatial level and both the composite (community) and the articulated (species)
      ecological levels. The model for each species and the community total is selected
      and fitted using the `tsglm` function in the **tscount** package [@Liboschik2017a]
      within the `nbsGARCH()` function. GARCH models are generalized ARMA models and
      are defined according to their link function, response distribution, and two
      model structure parameters -- the number of autoregressive terms (p) and the
      order of the moving average (q), and are represented as GARCH(p, q) [@Liboschik2017a].
      The nbsGARCH model is fit using the log link and a negative binomial response
      (modeled as an over-dispersed Poisson), as well as with p = 1 (first-order autoregression)
      and q = 12 (approximately yearly moving average). The `tsglm` function in the
      **tscount** package [@Liboschik2017a] uses a (conditional) quasi-likelihood
      based approach to inference and models the overdispersion as an additional parameter
      in a two-step approach. This two-stage approach has only been minimally evaluated,
      although preliminary simulation-based studies are promising [@Liboschik2017b].
  fun: nbsGARCH
  args: ~
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  response:
    link: negative_binomial
    type: distribution
  time: newmoon
pevGARCH:
  metadata:
    name: pevGARCH
    print_name: pevGARCH
    descriptor: classic model, all species, focal species, requires interpolation
    text: pevGARCH (Poisson Environmental Variable Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      fit to the interpolated data at the composite (full site and just control plots)
      spatial level and both the composite (community) and the articulated (species)
      ecological levels. The response variable is Poisson, and a variety of environmental
      variables are considered as covariates. The model for each species is selected
      and fitted using the `tsglm` function in the **tscount** package [@Liboschik2017a]
      within the `pevGARCH()` function. GARCH models are generalized ARMA models and
      are defined according to their link function, response distribution, and two
      model structure parameters -- the number of autoregressive terms (p) and the
      order of the moving average (q), and are represented as GARCH(p, q) [@Liboschik2017a].
      The pevGARCH model is fit using the log link and a Poisson response, as well
      as with p = 1 (first-order autoregression) and q = 12 (yearly moving average).
      The environmental variables potentially included in the model are min, mean,
      and max temperatures, precipitation, and NDVI.  The `tsglm` function in the
      **tscount** package [@Liboschik2017a] uses a (conditional) quasi-likelihood
      based approach to inference. This approach has only been minimally evaluated
      for models with covariates, although preliminary simulation-based studies are
      promising [@Liboschik2017b]. Each species is fit using the following (nonexhaustive)
      sets of the environmental covariates --  [1] max temp, mean temp, precipitation,
      NDVI; [2] max temp, min temp, precipitation, NDVI; [3] max temp, mean temp,
      min temp, precipitation; [4] precipitation, NDVI; [5] min temp, NDVI; [6] min
      temp; [7] max temp; [8] mean temp; [9] precipitation; [10] NDVI; and [11] -none-
      (intercept-only). The single best model of the 11 is selected based on AIC.
  fun: pevGARCH
  datasets:
  - all
  - controls
  - exclosures
  species:
  - BA
  - DM
  - DO
  - DS
  - NA
  - OL
  - OT
  - PB
  - PE
  - PF
  - PH
  - PL
  - PM
  - PP
  - RF
  - RM
  - RO
  - SF
  - SH
  - SO
  - total
  interpolate:
    needed: yes
    fun: round_na.interp
  args:
    lag: 6.0
  response:
    link: poisson
    type: distribution
  time: newmoon
jags_RW:
  metadata:
    name: jags_RW
    print_name: Random Walk
    descriptor: population model, focal species
    text: Random Walk fits a hierarchical log-scale density random walk model with
      a Poisson observation process using the JAGS (Just Another Gibbs Sampler) infrastructure
      [@Plummer2003] fit to the  data at the composite (full site but just control
      plots) spatial level and the articulated (species) ecological level. Similar
      to the NaiveArima model, Random Walk has an ARIMA order of (0,1,0), but in Random
      Walk, it is the underlying density that takes a random walk on the log scale,
      whereas in NaiveArima, it is the raw counts that take a random walk on the observation
      scale. There are two process parameters -- mu (the density of the species at
      the beginning of the time series) and sigma (the standard deviation of the random
      walk, which is Gaussian on the log scale). The observation model has no additional
      parameters. The prior distributions for mu is informed by the available data
      collected prior to the start of the data used in the time series. mu is normally
      distributed with a mean equal to the average log-scale density and a standard
      deviation of 0.04. Sigma was given a uniform distribution between 0 and 1.
  fun: jags_RW
  args:
    control_runjags:
      nchains: 4.0
      adapt: 10000.0
      burnin: 10000.0
      sample: 10000.0
      thin: 1.0
      modules: ''
      method: interruptible
      factories: ''
      mutate: .na
      cast_obs: yes
      silent_jags: no
  datasets: controls
  species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
  time: newmoon
jags_logistic:
  metadata:
    name: jags_logistic
    print_name: Logistic
    descriptor: population model, focal species
    text: Logistic fits a hierarchical log-scale density logistic growth model with
      a Poisson observation process using the JAGS (Just Another Gibbs Sampler) infrastructure
      [@Plummer2003] fit to the  data at the composite (full site but just control
      plots) spatial level and the articulated (species) ecological level. Building
      upon the jags_RW model, Logistic expands upon the "process model" underlying
      the Poisson observations. There are four process parameters -- mu (the density
      of the species at the beginning of the time series), sigma (the standard deviation
      of the random walk, which is Gaussian on the log scale), r (growth rate), and
      K (carrying capacity). The observation model has no additional parameters. The
      prior distributions for mu and K are informed by the available data collected
      prior to the start of the data used in the time series and sigma and r are set
      with vague priors. mu is normally distributed with a mean equal to the average
      log-scale density and a standard deviation of 0.04. K is modeled on the log-scale
      with a prior mean equal to the maximum of `past counts` and a standard deviation
      of 0.04. r is given a normal prior with mean 0 and standard deviation 0.04.
      Sigma was given a uniform distribution between 0 and 1.
  fun: jags_logistic
  args:
    control_runjags:
      nchains: 4.0
      adapt: 10000.0
      burnin: 10000.0
      sample: 10000.0
      thin: 1.0
      modules: ''
      method: interruptible
      factories: ''
      mutate: .na
      cast_obs: yes
      silent_jags: no
  datasets: controls
  species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
  time: newmoon
jags_logistic_covariates:
  metadata:
    name: jags_logistic_covariates
    print_name: Logistic Covariates
    descriptor: population model, focal species
    text: Logistic Covariates fits a hierarchical log-scale density logistic growth
      model with a Poisson observation process using the JAGS (Just Another Gibbs
      Sampler) infrastructure [@Plummer2003] fit to the  data at the composite (full
      site but just control plots) spatial level and the articulated (species) ecological
      level. Building upon the jags_logistic model, Logistic Covariates expands upon
      the "process model" underlying the Poisson observations. There are six process
      parameters -- mu (the density of the species at the beginning of the time series),
      sigma (the standard deviation of the random walk, which is Gaussian on the log
      scale), and then intercept and slope parameters for r (growth rate) and K (carrying
      capacity) as a function of covariates (r being a function of the integrated
      warm rain over the past 3 months and K being a function of average NDVI over
      the past year). The observation model has no additional parameters. The prior
      distributions for mu and the K intercept are informed by the available data
      collected prior to the start of the data used in the time series and sigma and
      r are set with vague priors. mu is normally distributed with a mean equal to
      the average log-scale density and standard deviation 0.04. The K intercept is
      modeled on the log-scale with a prior mean equal to the maximum of `past counts`
      and standard deviation 0.04. The r intercept is given a normal prior with mean
      0 and standard deviation 0.04. Sigma was given a uniform distribution between
      0 and 1. The slopes for r and log-scale K were given priors with mean 0 and
      standard deviation 1.
  fun: jags_logistic_covariates
  args:
    control_runjags:
      nchains: 4.0
      adapt: 10000.0
      burnin: 10000.0
      sample: 10000.0
      thin: 1.0
      modules: ''
      method: interruptible
      factories: ''
      mutate: .na
      cast_obs: yes
      silent_jags: no
  datasets: controls
  species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
  time: newmoon
jags_logistic_competition:
  metadata:
    name: jags_logistic_competition
    print_name: Logistic Competition
    descriptor: population model, focal species
    text: Logistic Competition fits a hierarchical log-scale density logistic growth
      model with a Poisson observation process using the JAGS (Just Another Gibbs
      Sampler) infrastructure [@Plummer2003] fit to the  data at the composite (full
      site but just control plots) spatial level and the articulated (species) ecological
      level. Building upon the jags_logistic model, Logistic Competition expands upon
      the "process model" underlying the Poisson observations. There are six process
      parameters -- mu (the density of the species at the beginning of the time series),
      sigma (the standard deviation of the random walk, which is Gaussian on the log
      scale), and then intercept and slope parameters for r (growth rate) and K (carrying
      capacity) as a function of competitior density (K being a function of current
      DO counts). The observation model has no additional parameters. The prior distributions
      for mu and the K intercept are informed by the available data collected prior
      to the start of the data used in the time series and sigma and r are set with
      vague priors. mu is normally distributed with a mean equal to the average log-scale
      density and standard deviation 0.04. The K intercept is modeled on the log-scale
      with a prior mean equal to the maximum of `past counts` and standard deviation
      0.04. The r intercept is given a normal prior with mean 0 and standard deviation
      0.04. Sigma was given a uniform distribution between 0 and 0.001. The slope
      for log-scale K was given a prior with mean 0 and standard deviation 1.
  fun: jags_logistic_competition
  args:
    control_runjags:
      nchains: 4.0
      adapt: 10000.0
      burnin: 10000.0
      sample: 10000.0
      thin: 1.0
      modules: ''
      method: interruptible
      factories: ''
      mutate: .na
      cast_obs: yes
      silent_jags: no
  datasets: controls
  species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
  time: newmoon
jags_logistic_competition_covariates:
  metadata:
    name: jags_logistic_competition_covariates
    print_name: Logistic Competition Covariates
    descriptor: population model, focal species
    text: Logistic Competition Covariates fits a hierarchical log-scale density logistic
      growth model with a Poisson observation process using the JAGS (Just Another
      Gibbs Sampler) infrastructure [@Plummer2003] fit to the  data at the composite
      (full site but just control plots) spatial level and the articulated (species)
      ecological level. Building upon the jags_logistic model, Logistic Competition
      Covariates expands upon the "process model" underlying the Poisson observations.
      There are seven process parameters -- mu (the density of the species at the
      beginning of the time series), sigma (the standard deviation of the random walk,
      which is Gaussian on the log scale), and then intercept and slope parameters
      for r (growth rate) and K (carrying capacity) as a function of competitior density
      (r being a function of the integrated warm rain over the past 3 months and K
      being a function of average NDVI over the past year as well as a function of
      current DO counts). The observation model has no additional parameters. The
      prior distributions for mu and the K intercept are informed by the available
      data collected prior to the start of the data used in the time series and sigma
      and r are set with vague priors. mu is normally distributed with a mean equal
      to the average log-scale density and standard deviation 0.04. The K intercept
      is modeled on the log-scale with a prior mean equal to the maximum of `past
      counts` and standard deviation 0.04. The r intercept is given a normal prior
      with mean 0 and standard deviation 0.04. Sigma was given a uniform distribution
      between 0 and 0.001. The slopes for r and log-scale K were given priors with
      mean 0 and standard deviation 1.
  fun: jags_logistic_competition_covariates
  args:
    control_runjags:
      nchains: 4.0
      adapt: 10000.0
      burnin: 10000.0
      sample: 10000.0
      thin: 1.0
      modules: ''
      method: interruptible
      factories: ''
      mutate: .na
      cast_obs: yes
      silent_jags: no
  datasets: controls
  species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
  time: newmoon
