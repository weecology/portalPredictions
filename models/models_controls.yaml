AutoArima:
  metadata:
    name: AutoArima
    print_name: AutoARIMA
    tags:
    - classic model
    - all species
    - focal species
    - arima
    text: AutoARIMA (Automatic Auto-Regressive Integrated Moving Average) is a flexible
      Auto-Regressive Integrated Moving Average (ARIMA) model. ARIMA models are defined
      according to three model structure parameters -- the number of autoregressive
      terms (p), the degree of differencing (d), and the order of the moving average
      (q), and are represented as ARIMA(p, d, q) [@Box1970]. All submodels are fit
      and the final model is selected using the `auto.arima` function in the **forecast**
      package [@Hyndman2013; @Hyndman2017]. AutoARIMA is fit flexibly, such that the
      model parameters can vary from fit to fit. Model forecasts are generated using
      the `forecast` function from the **forecast** package [@Hyndman2013; @Hyndman2017].
      While the `auto.arima` function allows for seasonal models, the seasonality
      is hard-coded to be on the same period as the sampling, which is not the case
      for the Portal rodent surveys. As a result, no seasonal models are evaluated
      within this model set, but see the sAutoARIMA model. The model is fit using
      a normal distribution, and as a result can generate negative-valued predictions
      and forecasts.
  fit:
    fun: auto.arima
    args:
      'y': abundance
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: no
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: normal
    type: distribution
    scoring_family: normal
  time: newmoon
sAutoArima:
  metadata:
    name: sAutoArima
    print_name: Seasonal AutoARIMA
    tags:
    - classic model
    - all species
    - focal species
    - arima
    - seasonal
    text: sAutoARIMA (Seasonal Automatic Auto-Regressive Integrated Moving Average)
      is a flexible Auto-Regressive Integrated Moving Average (ARIMA) model. ARIMA
      models are defined according to three model structure parameters -- the number
      of autoregressive terms (p), the degree of differencing (d), and the order of
      the moving average (q), and are represented as ARIMA(p, d, q) [@Box1970]. All
      submodels are fit and the final model is selected using the `auto.arima` function
      in the **forecast** package [@Hyndman2013; @Hyndman2017]. sAutoARIMA is fit
      flexibly, such that the model parameters can vary from fit to fit. Model forecasts
      are generated using the `forecast` function from the **forecast** package [@Hyndman2013;
      @Hyndman2017]. While the `auto.arima` function allows for seasonal models, the
      seasonality is hard-coded to be on the same period as the sampling, which is
      not the case for the Portal rodent surveys. We therefore use two Fourier series
      terms (sin and cos of the fraction of the year) as external regressors to achieve
      the seasonal dynamics in the sAutoARIMA model. The model is fit using a normal
      distribution, and as a result can generate negative-valued predictions and forecasts.
  fit:
    fun: auto.arima
    args:
      'y': abundance
      xreg: as.matrix(covariates[covariates$newmoonnumber %in% metadata$time$historic_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")])
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      xreg: as.matrix(covariates[covariates$newmoonnumber %in% metadata$time$forecast_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")])
  interpolate:
    needed: no
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: normal
    type: distribution
    scoring_family: normal
  time: newmoon
ESSS:
  metadata:
    name: ESSS
    print_name: ESSS
    tags:
    - classic model
    - all species
    - focal species
    - ets
    - requires interpolation
    text: ESSS (Exponential Smoothing State Space) is a flexible exponential smoothing
      state space model [@Hyndman2008]. The model is fit using the `ets` function
      in the **forecast** package [@Hyndman2017] with the `allow.multiplicative.trend`
      argument set to `TRUE`. Model forecasts are generated using the `forecast` function
      from the **forecast** package [@Hyndman2013; @Hyndman2017]. Models fit using
      `ets` implement what is known as the "innovations" approach to state space modeling,
      which assumes a single source of noise that is equivalent for the process and
      observation errors [@Hyndman2008]. In general, ESSS models are defined according
      to three model structure parameters -- error type, trend type, and seasonality
      type [@Hyndman2008]. Each of the parameters can be an N (none), A (additive),
      or M (multiplicative) state [@Hyndman2008]. However, because of the difference
      in period between seasonality and sampling of the Portal rodents combined with
      the hard-coded single period of the `ets` function, we do not include the seasonal
      components to the ESSS model. ESSS is fit flexibly, such that the model parameters
      can vary from fit to fit. The model is fit using a normal distribution, and
      as a result can generate negative-valued predictions and forecasts.
  fit:
    fun: ets
    args:
      'y': abundance
      allow.multiplicative.trend: yes
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: normal
    type: distribution
    scoring_family: normal
  time: newmoon
NaiveArima:
  metadata:
    name: NaiveArima
    print_name: NaiveARIMA
    tags:
    - classic model
    - all species
    - focal species
    - arima
    text: NaiveARIMA (Naive Auto-Regressive Integrated Moving Average) is a fixed
      Auto-Regressive Integrated Moving Average (ARIMA) model of order (0,1,0). The
      model is fit using the `Arima` function in the **forecast** package [@Hyndman2013;
      @Hyndman2017]. Model forecasts are generated using the `forecast` function from
      the **forecast** package [@Hyndman2013; @Hyndman2017]. While the `Arima` function
      allows for seasonal models, the seasonality is hard-coded to be on the same
      period as the sampling, which is not the case for the Portal rodent surveys.
      As a result, NaiveARIMA does not include seasonal terms, but see the sNaiveARIMA
      model. The model is fit using a normal distribution, and as a result can generate
      negative-valued predictions and forecasts.
  fit:
    fun: Arima
    args:
      'y': abundance
      order: c(0, 1, 0)
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: no
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: normal
    type: distribution
    scoring_family: normal
  time: newmoon
sNaiveArima:
  metadata:
    name: sNaiveArima
    print_name: Seasonal NaiveARIMA
    tags:
    - classic model
    - all species
    - focal species
    - seasonal
    - arima
    text: sNaiveARIMA (Seasonal Naive Auto-Regressive Integrated Moving Average) is
      a fixed Auto-Regressive Integrated Moving Average (ARIMA) model of order (0,1,0).
      The model is fit using the `Arima` function in the **forecast** package [@Hyndman2013;
      @Hyndman2017]. Model forecasts are generated using the `forecast` function from
      the **forecast** package [@Hyndman2013; @Hyndman2017]. While the `Arima` function
      allows for seasonal models, the seasonality is hard-coded to be on the same
      period as the sampling, which is not the case for the Portal rodent surveys.
      We therefore use two Fourier series terms (sin and cos of the fraction of the
      year) as external regressors to achieve the seasonal dynamics in the  NaiveARIMA
      model. The model is fit using a normal distribution, and as a result can generate
      negative-valued predictions and forecasts.
  fit:
    fun: Arima
    args:
      'y': abundance
      xreg: as.matrix(covariates[covariates$newmoonnumber %in% metadata$time$historic_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")])
      order: c(0, 1, 0)
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      xreg: as.matrix(covariates[covariates$newmoonnumber %in% metadata$time$forecast_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")])
  interpolate:
    needed: no
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: normal
    type: distribution
    scoring_family: normal
  time: newmoon
nbGARCH:
  metadata:
    name: nbGARCH
    print_name: nbGARCH
    tags:
    - classic model
    - all species
    - focal species
    - garch
    - requires interpolation
    text: nbGARCH (Negative Binomial Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      with overdispersion (*i.e.*, a negative binomial response). The model is fit
      to the interpolated data using the `tsglm` function in the **tscount** package
      [@Liboschik2017a]. GARCH models are generalized ARMA models and are defined
      according to their link function, response distribution, and two model structure
      parameters -- the number of autoregressive terms (p) and the order of the moving
      average (q), and are represented as GARCH(p, q) [@Liboschik2017a]. The nbGARCH
      model is fit using the log link and a negative binomial response (modeled as
      an over-dispersed Poisson), as well as with p = 1 (first-order autoregression)
      and q = 13 (approximately yearly moving average). The `tsglm` function in the
      **tscount** package [@Liboschik2017a] uses a (conditional) quasi-likelihood
      based approach to inference and models the overdispersion as an additional parameter
      in a two-step approach. This two-stage approach has only been minimally evaluated,
      although preliminary simulation-based studies are promising [@Liboschik2017b].
      Forecasts are made using the **portalcasting** method function `forecast.tsglm`
      as `forecast`.
  fit:
    fun: tsglm
    args:
      ts: abundance
      model: list(past_obs  = 1, past_mean = 13)
      distr: '''nbinom'''
      link: '''log'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - SF
      - SH
      - total
  response:
    link: negative_binomial
    type: distribution
    scoring_family: nbinom
  time: newmoon
nbsGARCH:
  metadata:
    name: nbsGARCH
    print_name: nbsGARCH
    tags:
    - classic model
    - all species
    - focal species
    - garch
    - seasonal
    - requires interpolation
    text: nbsGARCH (Negative Binomial Seasonal Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      with overdispersion (*i.e.*, a negative binomial response) and seasonal predictors
      modeled using two Fourier series terms (sin and cos of the fraction of the year)
      fit to the interpolated data. The model is fit using the `tsglm` function in
      the **tscount** package [@Liboschik2017a]. GARCH models are generalized ARMA
      models and are defined according to their link function, response distribution,
      and two model structure parameters -- the number of autoregressive terms (p)
      and the order of the moving average (q), and are represented as GARCH(p, q)
      [@Liboschik2017a]. The nbsGARCH model is fit using the log link and a negative
      binomial response (modeled as an over-dispersed Poisson), as well as with p
      = 1 (first-order autoregression) and q = 13 (approximately yearly moving average).
      The `tsglm` function in the **tscount** package [@Liboschik2017a] uses a (conditional)
      quasi-likelihood based approach to inference and models the overdispersion as
      an additional parameter in a two-step approach. This two-stage approach has
      only been minimally evaluated, although preliminary simulation-based studies
      are promising [@Liboschik2017b]. Forecasts are made using the **portalcasting**
      method function `forecast.tsglm` as `forecast`.
  fit:
    fun: tsglm
    args:
      ts: abundance
      model: list(past_obs  = 1, past_mean = 13)
      distr: '''nbinom'''
      link: '''log'''
      xreg: covariates[covariates$newmoonnumber %in% metadata$time$historic_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")]
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      newxreg: covariates[covariates$newmoonnumber %in% metadata$time$forecast_newmoonnumbers,
        c("cos2pifoy", "sin2pifoy")]
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - OL
      - OT
      - PB
      - PF
      - PM
      - PP
      - RM
      - SF
      - total
    exclosures:
      species:
      - BA
      - OL
      - OT
      - PB
      - PE
      - PM
      - PP
      - SF
      - total
  response:
    link: negative_binomial
    type: distribution
    scoring_family: nbinom
  time: newmoon
pGARCH:
  metadata:
    name: pGARCH
    print_name: pGARCH
    tags:
    - classic model
    - all species
    - focal species
    - garch
    - requires interpolation
    text: pGARCH (Poisson Auto-Regressive Conditional Heteroskedasticity) is a generalized
      autoregressive conditional heteroskedasticity (GARCH) model. The model is fit
      using the `tsglm` function in the **tscount** package [@Liboschik2017a]. GARCH
      models are generalized ARMA models and are defined according to their link function,
      response distribution, and two model structure parameters -- the number of autoregressive
      terms (p) and the order of the moving average (q), and are represented as GARCH(p,
      q) [@Liboschik2017a]. The pGARCH model is fit using the log link and a Poisson
      response, as well as with p = 1 (first-order autoregression) and q = 13 (approximately
      yearly moving average). Forecasts are made using the **portalcasting** method
      function `forecast.tsglm` as `forecast`.
  fit:
    fun: tsglm
    args:
      ts: abundance
      model: list(past_obs  = 1, past_mean = 13)
      distr: '''poisson'''
      link: '''log'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: negative_binomial
    type: distribution
    scoring_family: poisson
  time: newmoon
psGARCH:
  metadata:
    name: psGARCH
    print_name: psGARCH
    tags:
    - classic model
    - all species
    - focal species
    - garch
    - seasonal requires interpolation
    text: psGARCH (Poisson Seasonal Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model
      with seasonal predictors modeled using two Fourier series terms (sin and cos
      of the fraction of the year) fit to the interpolated data. The model is fit
      using the `tsglm` function in the **tscount** package [@Liboschik2017a]. GARCH
      models are generalized ARMA models and are defined according to their link function,
      response distribution, and two model structure parameters -- the number of autoregressive
      terms (p) and the order of the moving average (q), and are represented as GARCH(p,
      q) [@Liboschik2017a]. The pGARCH model is fit using the log link and a Poisson
      response, as well as with p = 1 (first-order autoregression) and q = 13 (approximately
      yearly moving average).  Forecasts are made using the **portalcasting** method
      function `forecast.tsglm` as `forecast`.
  fit:
    fun: tsglm
    args:
      ts: abundance
      model: list(past_obs  = 1, past_mean = 13)
      distr: '''poisson'''
      link: '''log'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
  interpolate:
    needed: yes
    fun: round_na.interp
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  response:
    link: negative_binomial
    type: distribution
    scoring_family: poisson
  time: newmoon
pevGARCH:
  metadata:
    name: pevGARCH
    print_name: pevGARCH
    tags:
    - classic model
    - all species
    - focal species
    - garch
    - requires interpolation
    text: pevGARCH (Poisson Environmental Variable Auto-Regressive Conditional Heteroskedasticity)
      is a generalized autoregressive conditional heteroskedasticity (GARCH) model.
      The response variable is Poisson, and a variety of environmental variables are
      considered as covariates. The overall model is fit using the **portalcasting**
      function `meta_tsglm` that iterates over the submodels, which are fit using
      the `tsglm` function in the **tscount** package [@Liboschik2017a]. GARCH models
      are generalized ARMA models and are defined according to their link function,
      response distribution, and two model structure parameters -- the number of autoregressive
      terms (p) and the order of the moving average (q), and are represented as GARCH(p,
      q) [@Liboschik2017a]. The pevGARCH model is fit using the log link and a Poisson
      response, as well as with p = 1 (first-order autoregression) and q = 13 (yearly
      moving average). The environmental variables potentially included in the model
      are min, mean, and max temperatures, precipitation, and NDVI.  The `tsglm` function
      in the **tscount** package [@Liboschik2017a] uses a (conditional) quasi-likelihood
      based approach to inference. This approach has only been minimally evaluated
      for models with covariates, although preliminary simulation-based studies are
      promising [@Liboschik2017b]. The overall model is composed of 11 submodels from
      a (nonexhaustive) combination of the environmental covariates --  [1] max temp,
      mean temp, precipitation, NDVI; [2] max temp, min temp, precipitation, NDVI;
      [3] max temp, mean temp, min temp, precipitation; [4] precipitation, NDVI; [5]
      min temp, NDVI; [6] min temp; [7] max temp; [8] mean temp; [9] precipitation;
      [10] NDVI; and [11] -none- (intercept-only). The single best model of the 11
      is selected based on AIC. Forecasts are made using the **portalcasting** method
      function `forecast.tsglm` as `forecast`.
  fit:
    fun: meta_tsglm
    args:
      ts: abundance
      model: list(past_obs  = 1, past_mean = 13)
      distr: '''poisson'''
      link: '''log'''
      lag: 6
      submodels: list(c("maxtemp", "meantemp", "precipitation", "ndvi"), c("maxtemp",
        "mintemp", "precipitation", "ndvi"), c("mintemp", "maxtemp", "meantemp", "precipitation"),
        c("precipitation", "ndvi"), c("mintemp", "ndvi"), c("mintemp"), c("maxtemp"),
        c("meantemp"), c("precipitation"), c("ndvi"), c(NULL))
      covariates: covariates
      metadata: metadata
      quiet: '!settings$verbose'
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      newxreg: covariates[covariates$newmoonnumber %in% (metadata$time$forecast_newmoonnumbers
        - model_fit$lag), unlist(model_fit$submodel)]
  datasets:
    all:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PL
      - PM
      - PP
      - RM
      - RO
      - SF
      - SH
      - total
    controls:
      species:
      - BA
      - DM
      - DO
      - DS
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
    exclosures:
      species:
      - BA
      - NA
      - OL
      - OT
      - PB
      - PE
      - PF
      - PM
      - PP
      - RM
      - SF
      - SH
      - total
  interpolate:
    needed: yes
    fun: round_na.interp
  response:
    link: poisson
    type: distribution
    scoring_family: poisson
  time: newmoon
jags_RW:
  metadata:
    name: jags_RW
    print_name: Random Walk
    tags:
    - population model
    - focal species
    - jags
    - state-space
    text: Random Walk fits a hierarchical log-scale density random walk model with
      a Poisson observation process using the JAGS (Just Another Gibbs Sampler) infrastructure
      [@Plummer2003]. Similar to the NaiveArima model, Random Walk has an ARIMA order
      of (0,1,0), but in Random Walk, it is the underlying density that takes a random
      walk on the log scale, whereas in NaiveArima, it is the raw counts that take
      a random walk on the observation scale. There are two process parameters --
      mu (the density of the species at the beginning of the time series) and sigma
      (the standard deviation of the random walk, which is Gaussian on the log scale).
      The observation model has no additional parameters. The prior distributions
      for mu is informed by the available data collected prior to the start of the
      data used in the time series. mu is normally distributed with a mean equal to
      the average log-scale density and a standard deviation of 0.04. sigma was given
      a uniform distribution between 0 and 1. The Random Walk model is fit and forecast
      using the **portalcasting** functions `fit_runjags` and `forecast.runjags` (called
      as `forecast`), respectively.
  fit:
    fun: fit_runjags
    args:
      abundance: abundance
      control_runjags: runjags_controls( )
      metadata: metadata
      covariates: covariates
      data_names:
      - count
      - 'N'
      - log_mean_count
      monitors:
      - mu
      - sigma
      model: file.path(main, settings$subdirectories$models, "jags_RW.txt")
      inits:
        mu: rnorm(1, mean = data$log_mean_count, sd = 0.1)
        sigma: runif(1, min = 0.01, max = 0.5)
    model_file: jags_RW.txt
    full_model_file: '''./models/jags_RW.txt'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      nsamples: metadata$nsamples
  datasets:
    controls:
      species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
    scoring_family: sample
  time: newmoon
jags_logistic:
  metadata:
    name: jags_logistic
    print_name: Logistic
    tags:
    - population model
    - focal species
    - jags
    - state-space
    text: Logistic fits a hierarchical log-scale density logistic growth model with
      a Poisson observation process using the JAGS (Just Another Gibbs Sampler) infrastructure
      [@Plummer2003]. Building upon the Random Walk model, Logistic expands upon the
      "process model" underlying the Poisson observations. There are four process
      parameters -- mu (the density of the species at the beginning of the time series),
      sigma (the standard deviation of the random walk, which is Gaussian on the log
      scale), r (growth rate), and K (carrying capacity). The observation model has
      no additional parameters. The prior distributions for mu and K are slightly
      informed in that they are vague but centered using the available data and sigma
      and r are set with vague priors. mu is normally distributed with a mean equal
      to the average log-scale density and a standard deviation of 0.04. K is modeled
      on the log-scale with a prior mean equal to the log maximum count and a standard
      deviation of 0.04. r is given a normal prior with mean 0 and standard deviation
      0.04. sigma was given a uniform distribution between 0 and 1. The Logistic model
      is fit and forecast using the **portalcasting** functions `fit_runjags` and
      `forecast.runjags` (called as `forecast`), respectively.
  fit:
    fun: fit_runjags
    args:
      abundance: abundance
      control_runjags: runjags_controls( )
      metadata: metadata
      covariates: covariates
      data_names:
      - count
      - 'N'
      - log_mean_count
      - log_max_count
      monitors:
      - mu
      - sigma
      - r
      - log_K
      model: file.path(main, settings$subdirectories$models, "jags_logistic.txt")
      inits:
        mu: rnorm(1, data$log_mean_count, 0.1)
        sigma: runif(1, 0.01, 0.5)
        r: rnorm(1, 0, 0.01)
        log_K: rnorm(1, data$log_max_count, 0.01)
    model_file: jags_logistic.txt
    full_model_file: '''./models/jags_logistic.txt'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      nsamples: metadata$nsamples
  datasets:
    controls:
      species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
    scoring_family: sample
  time: newmoon
jags_logistic_covariates:
  metadata:
    name: jags_logistic_covariates
    print_name: Logistic Covariates
    tags:
    - population model
    - focal species
    - jags
    - state-space
    text: Logistic Covariates fits a hierarchical log-scale density logistic growth
      model with a Poisson observation process using the JAGS (Just Another Gibbs
      Sampler) infrastructure [@Plummer2003]. Building upon the Logistic model, Logistic
      Covariates expands upon the "process model" underlying the Poisson observations.
      There are six process parameters -- mu (the density of the species at the beginning
      of the time series), sigma (the standard deviation of the random walk, which
      is Gaussian on the log scale), and then intercept and slope parameters for r
      (growth rate) and K (carrying capacity) as a function of covariates (r being
      a function of the integrated warm rain over the past 3 lunar months and K being
      a function of average NDVI over the 13 lunar months). The observation model
      has no additional parameters. The prior distributions for mu and the K interceptare
      slightly informed in that they are vague but centered using the available data
      and sigma and r are set with vague priors. mu is normally distributed with a
      mean equal to the average log-scale density and standard deviation 0.04. The
      K intercept is modeled on the log-scale with a prior mean equal to the maximum
      count and standard deviation 0.04. The r intercept is given a normal prior with
      mean 0 and standard deviation 0.04. sigma was given a uniform distribution between
      0 and 1. The slopes for r and log-scale K were given priors with mean 0 and
      standard deviation 1. The Logistic Covariates model is fit and forecast using
      the **portalcasting** functions `fit_runjags` and `forecast.runjags` (called
      as `forecast`), respectively.
  fit:
    fun: fit_runjags
    args:
      abundance: abundance
      control_runjags: runjags_controls( )
      metadata: metadata
      covariates: covariates
      data_names:
      - count
      - 'N'
      - log_mean_count
      - log_max_count
      - warm_rain_three_newmoons
      - ndvi_thirteen_newmoons
      monitors:
      - mu
      - sigma
      - r_int
      - r_slope
      - log_K_int
      - log_K_slope
      model: file.path(main, settings$subdirectories$models, "jags_logistic_covariates.txt")
      inits:
        mu: rnorm(1, data$log_mean_count, 0.1)
        sigma: runif(1, 0.01, 0.5)
        r_int: rnorm(1, 0, 0.01)
        r_slope: rnorm(1, 0, 0.1)
        log_K_int: rnorm(1, data$log_max_count, 0.01)
        log_K_slope: rnorm(1, 0, 0.01)
    model_file: jags_logistic_covariates.txt
    full_model_file: '''./models/jags_logistic_covariates.txt'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      nsamples: metadata$nsamples
  datasets:
    controls:
      species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
    scoring_family: sample
  time: newmoon
jags_logistic_competition:
  metadata:
    name: jags_logistic_competition
    print_name: Logistic Competition
    tags:
    - population model
    - focal species
    - jags
    - state-space
    text: Logistic Competition fits a hierarchical log-scale density logistic growth
      model with a Poisson observation process using the JAGS (Just Another Gibbs
      Sampler) infrastructure [@Plummer2003]. Building upon the Logistic model, Logistic
      Competition expands upon the "process model" underlying the Poisson observations.
      There are six process parameters -- mu (the density of the species at the beginning
      of the time series), sigma (the standard deviation of the random walk, which
      is Gaussian on the log scale), and then intercept and slope parameters for r
      (growth rate) and K (carrying capacity) as a function of competitior density
      (K being a function of current DO counts). The observation model has no additional
      parameters. The prior distributions for mu and the K intercept are slightly
      informed in that they are vague but centered using the available data  and sigma
      and r are set with vague priors. mu is normally distributed with a mean equal
      to the average log-scale density and standard deviation 0.04. The K intercept
      is modeled on the log-scale with a prior mean equal to the maximum of `past
      counts` and standard deviation 0.04. The r intercept is given a normal prior
      with mean 0 and standard deviation 0.04. sigma was given a uniform distribution
      between 0 and 1. The slope for log-scale K was given a prior with mean 0 and
      standard deviation 1. The Logistic Competition model is fit and forecast using
      the **portalcasting** functions `fit_runjags` and `forecast.runjags` (called
      as `forecast`), respectively.
  fit:
    fun: fit_runjags
    args:
      abundance: abundance
      control_runjags: runjags_controls( )
      metadata: metadata
      covariates: covariates
      data_names:
      - count
      - 'N'
      - log_mean_count
      - log_max_count
      - ordii_one_newmoon
      monitors:
      - mu
      - sigma
      - r_int
      - log_K_int
      - log_K_slope
      model: file.path(main, settings$subdirectories$models, "jags_logistic_competition.txt")
      inits:
        mu: rnorm(1, data$log_mean_count, 0.1)
        sigma: runif(1, 0.01, 0.5)
        r_int: rnorm(1, 0, 0.01)
        log_K_int: rnorm(1, data$log_max_count, 0.01)
        log_K_slope: rnorm(1, 0, 0.01)
    model_file: jags_logistic_competition.txt
    full_model_file: '''./models/jags_logistic_competition.txt'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      nsamples: metadata$nsamples
  datasets:
    controls:
      species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
    scoring_family: sample
  time: newmoon
jags_logistic_competition_covariates:
  metadata:
    name: jags_logistic_competition_covariates
    print_name: Logistic Competition Covariates
    tags:
    - population model
    - focal species
    - jags
    - state-space
    text: Logistic Competition Covariates fits a hierarchical log-scale density logistic
      growth model with a Poisson observation process using the JAGS (Just Another
      Gibbs Sampler) infrastructure [@Plummer2003]. Building upon the Logistic model,
      Logistic Competition Covariates expands upon the "process model" underlying
      the Poisson observations. There are seven process parameters -- mu (the density
      of the species at the beginning of the time series), sigma (the standard deviation
      of the random walk, which is Gaussian on the log scale), and then intercept
      and slope parameters for r (growth rate) and K (carrying capacity) with r being
      a function of the integrated warm rain over the past 3 lunar months and K being
      a function of average NDVI over the past 13 lunar months as well as a function
      of current DO count). The observation model has no additional parameters. The
      prior distributions for mu and the K intercept are are slightly informed in
      that they are vague but centered using the available data and sigma and r are
      set with vague priors. mu is normally distributed with a mean equal to the average
      log-scale density and standard deviation 0.04. The K intercept is modeled on
      the log-scale with a prior mean equal to the maximum count and standard deviation
      0.04. The r intercept is given a normal prior with mean 0 and standard deviation
      0.04. Sigma was given a uniform distribution between 0 and 0.001. The slope
      for r was given a normal prior with mean 0 and standard deviation 1, whereas
      the normal priors for the log K slopes were given mean 0 and standard deviation
      0.0625. The Logistic Competition Covariates model is fit and forecast using
      the **portalcasting** functions `fit_runjags` and `forecast.runjags` (called
      as `forecast`), respectively.
  fit:
    fun: fit_runjags
    args:
      abundance: abundance
      control_runjags: runjags_controls( )
      metadata: metadata
      covariates: covariates
      data_names:
      - count
      - 'N'
      - log_mean_count
      - log_max_count
      - ordii_one_newmoon
      - warm_rain_three_newmoons
      - ndvi_thirteen_newmoons
      monitors:
      - mu
      - sigma
      - r_int
      - r_slope
      - log_K_int
      - log_K_slope_NDVI
      - log_K_slope_DO
      model: file.path(main, settings$subdirectories$models, "jags_logistic_competition_covariates.txt")
      inits:
        mu: rnorm(1, data$log_mean_count, 0.1)
        sigma: runif(1, 0.01, 0.5)
        r_int: rnorm(1, 0, 0.01)
        r_slope: rnorm(1, 0, 0.1)
        log_K_int: rnorm(1, data$log_max_count, 0.01)
        log_K_slope_DO: rnorm(1, 0, 0.01)
        log_K_slope_NDVI: rnorm(1, 0, 0.01)
    model_file: jags_logistic_competition_covariates.txt
    full_model_file: '''./models/jags_logistic_competition_covariates.txt'''
  forecast:
    fun: forecast
    args:
      object: model_fit
      h: metadata$time$lead_time_newmoons
      level: metadata$confidence_level
      nsamples: metadata$nsamples
  datasets:
    controls:
      species: DM
  interpolate:
    needed: no
  response:
    link: poisson
    type: empirical
    scoring_family: sample
  time: newmoon
